pipeline {
    agent any

    environment {
        // Ajustá estos valores a tu cuenta de DockerHub
        DOCKERHUB_CREDENTIALS = credentials('dockerhub-cred')  
        DOCKERHUB_REPO = "tuusuario/ingenieriasoftwareaplicada"
        APP_NAME = "ingenieriasoftwareaplicada"
    }

    stages {
        stage('Checkout') {
            steps {
                git branch: 'main',
                    url: 'https://github.com/marcoscassone02/ingenieria-software-aplicada.git   '
            }
        }

        stage('Build with Maven') {
            steps {
                sh './mvnw clean package -DskipTests'
            }
        }

        stage('Run tests') {
            steps {
                sh './mvnw test'
            }
        }

        stage('Build Docker image') {
            steps {
                script {
                    sh """
                        docker build -t $DOCKERHUB_REPO:latest .
                    """
                }
            }
        }

        stage('Push Docker image') {
            steps {
                script {
                    sh """
                        echo "$DOCKERHUB_CREDENTIALS_PSW" | docker login -u "$DOCKERHUB_CREDENTIALS_USR" --password-stdin
                        docker push $DOCKERHUB_REPO:latest
                    """
                }
            }
        }
    }
}
```

## 2. Crear un Dockerfile para producción

También necesitas un Dockerfile en la raíz del proyecto para que el pipeline funcione. Te voy a crear uno optimizado para tu aplicación JHipster:

```dockerfile:/home/marcospc/Escritorio/ingenieria-software-aplicada/Dockerfile
# Multi-stage build para optimizar el tamaño de la imagen
FROM maven:3.9.6-openjdk-17-slim AS build

# Establecer directorio de trabajo
WORKDIR /app

# Copiar archivos de configuración de Maven
COPY pom.xml .
COPY .mvn .mvn
COPY mvnw .

# Descargar dependencias (esto se cachea si pom.xml no cambia)
RUN ./mvnw dependency:go-offline -B

# Copiar código fuente
COPY src src

# Construir la aplicación
RUN ./mvnw clean package -DskipTests -B

# Imagen de producción
FROM openjdk:17-jre-slim

# Instalar dependencias del sistema
RUN apt-get update && apt-get install -y \
    curl \
    && rm -rf /var/lib/apt/lists/*

# Crear usuario no-root para seguridad
RUN groupadd -r appuser && useradd -r -g appuser appuser

# Establecer directorio de trabajo
WORKDIR /app

# Copiar el JAR construido desde la etapa anterior
COPY --from=build /app/target/*.jar app.jar

# Cambiar ownership al usuario appuser
RUN chown -R appuser:appuser /app
USER appuser

# Exponer puerto
EXPOSE 8080

# Configurar healthcheck
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:8080/management/health || exit 1

# Comando para ejecutar la aplicación
ENTRYPOINT ["java", "-jar", "app.jar"]
```

## 3. Crear un .dockerignore para optimizar el build

```dockerignore:/home/marcospc/Escritorio/ingenieria-software-aplicada/.dockerignore
# Archivos de desarrollo
.git
.gitignore
README.md
Dockerfile
.dockerignore

# Directorios de build
target/
node_modules/
npm-debug.log*

# Archivos de IDE
.idea/
.vscode/
*.iml
*.ipr
*.iws

# Archivos temporales
*.tmp
*.temp
.DS_Store
Thumbs.db

# Logs
*.log
logs/

# Archivos de test
src/test/
cypress/ 